# bot.py   ‚Äî   Python ‚â•3.10         –í–µ—Ä—Å–∏—è: 2025‚Äë05‚Äë22
import asyncio, os, json, logging, aiohttp, aiosqlite
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from typing import Tuple

from aiogram import Bot, Dispatcher, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
# from pydantic import BaseSettings, Field
from pydantic_settings import BaseSettings
from pydantic import Field, ConfigDict
# from aiograph import Telegraph
from telegraph import Telegraph
from dotenv import load_dotenv

load_dotenv()


# ---------- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ----------
class Settings(BaseSettings):
    telegram_token: str = Field(..., validation_alias="TELEGRAM_BOT_TOKEN")
    deepseek_api_key: str = Field(..., validation_alias="DEEPSEEK_API_KEY")
    local_tz: str = "Etc/GMT-3"

    model_config = ConfigDict(
        env_file=".env",       # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ .env
        env_file_encoding="utf-8",
        extra="ignore"         # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    )


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()
logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s [%(levelname)s] %(message)s")
DB_PATH = "topics.db"
LOCAL_TZ = ZoneInfo(settings.local_tz)

# bot = Bot(settings.telegram_token, parse_mode="HTML")
bot = Bot(settings.telegram_token, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())
telegraph = Telegraph()                      # –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
telegraph.create_account(short_name="deepstudy")


PROMPT_TEMPLATE = (
    '–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–æ–≥–∏ –≥–ª—É–±–æ–∫–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–µ–º–µ: "{topic}".\n'
    "–°—Ñ–æ—Ä–º–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –æ–±—ä—ë–º–æ–º 2500‚Äë3000 —Å–ª–æ–≤ (~15‚Äë20‚ÄØ–º–∏–Ω —á—Ç–µ–Ω–∏—è).\n\n"
    "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é (Markdown):\n"
    "1. **Executive summary** ‚Äì 3‚Äë4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n"
    "2. **–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ** (h2).\n"
    "3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞: –≤–≤–µ–¥–µ–Ω–∏–µ; –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏; –ø—Ä–∏–º–µ—Ä—ã;\n"
    "   —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤; –ø–æ–¥–≤–æ–¥–Ω—ã–µ –∫–∞–º–Ω–∏.\n"
    "4. –ë–ª–æ–∫ **¬´–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã¬ª** ‚Äì bullet‚Äëlist.\n"
    "5. –¢—Ä–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏—è —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
    "–ù–µ –ø—Ä–µ–≤—ã—à–∞–π 8000¬†—Ç–æ–∫–µ–Ω–æ–≤, –∏–∑–±–µ–≥–∞–π ¬´–≤–æ–¥—ã¬ª, –ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
)

# ---------- 2. FSM –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–º—ã ----------
class AddTopic(StatesGroup):
    waiting_topic = State()
class SetTime(StatesGroup):
    waiting_time = State()

# ---------- 3. –ë–∞–∑–æ–≤—ã–µ —Ö–µ–ª–ø–µ—Ä—ã ----------
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.executescript("""
            CREATE TABLE IF NOT EXISTS topics (
                rowid INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                topic   TEXT
            );
            CREATE TABLE IF NOT EXISTS all_topics (
                id            INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id       INTEGER,
                topic         TEXT,
                added_at      TIMESTAMP,
                telegraph_url TEXT,
                answered_at   TIMESTAMP
            );
            CREATE TABLE IF NOT EXISTS user_settings (
                user_id INTEGER PRIMARY KEY,
                hour    INTEGER,
                minute  INTEGER
            );
        """)
        await db.commit()

async def get_user_time(db, user_id: int) -> Tuple[int, int]:
    cur = await db.execute("SELECT hour, minute FROM user_settings WHERE user_id=?",
                           (user_id,))
    row = await cur.fetchone()
    return row if row else (10, 0)          # –¥–µ—Ñ–æ–ª—Ç 10:00 GMT+3

async def set_user_time(db, user_id: int, hour: int, minute: int):
    await db.execute("""
        INSERT INTO user_settings(user_id, hour, minute)
        VALUES(?,?,?)
        ON CONFLICT(user_id) DO UPDATE SET hour=excluded.hour, minute=excluded.minute
    """, (user_id, hour, minute))
    await db.commit()

# ---------- 4. /start ----------
def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data="add_topic")],
        [InlineKeyboardButton(text="‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="gen_now")],
        [InlineKeyboardButton(text="üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è",      callback_data="chg_time")]
    ])

@dp.message(CommandStart())
async def cmd_start(msg: Message):
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ó–∞–ø–∏—Å—ã–≤–∞–π —Ç–µ–º—ã, –∞ —è –±—É–¥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã.\n"
        "–ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –ø–æ–º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º.",
        reply_markup=main_keyboard()
    )

# ---------- 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã ----------
@dp.callback_query(F.data == "add_topic")
async def ask_topic(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å:")
    await state.set_state(AddTopic.waiting_topic)
    await cb.answer()

@dp.message(AddTopic.waiting_topic)
async def save_topic(msg: Message, state: FSMContext):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO topics(user_id, topic) VALUES(?,?)",
                         (msg.from_user.id, msg.text.strip()))
        await db.execute("""
            INSERT INTO all_topics(user_id, topic, added_at)
            VALUES(?,?,CURRENT_TIMESTAMP)
        """, (msg.from_user.id, msg.text.strip()))
        await db.commit()
    await msg.reply("–¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ", reply_markup=main_keyboard())
    await state.clear()

# ---------- 6. /list ----------
@dp.message(Command("list"))
async def list_queue(msg: Message):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT topic FROM topics WHERE user_id=?",
                               (msg.from_user.id,))
        rows = await cur.fetchall()
    if not rows:
        await msg.answer("üöÄ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
    else:
        await msg.answer("–í –æ—á–µ—Ä–µ–¥–∏:\n" + "\n".join(f"‚Ä¢ {r[0]}" for r in rows))

# ---------- 7. /history ----------
@dp.message(Command("history"))
async def history(msg: Message):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT topic, telegraph_url, answered_at
            FROM all_topics
            WHERE user_id=? AND telegraph_url IS NOT NULL
            ORDER BY answered_at DESC
            LIMIT 30
        """, (msg.from_user.id,))
        rows = await cur.fetchall()
    if not rows:
        await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π.")
        return
    text = "\n".join(
        f"‚Ä¢ <b>{t}</b> ‚Äî <a href=\"{u}\">—á–∏—Ç–∞—Ç—å</a> ({a[:10]})"
        for t, u, a in rows
    )
    await msg.answer("<b>–ò—Å—Ç–æ—Ä–∏—è:</b>\n" + text,
                     disable_web_page_preview=True)

# ---------- 8. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ ----------
@dp.callback_query(F.data == "chg_time")
async def ask_new_time(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (GMT+3):")
    await state.set_state(SetTime.waiting_time)
    await cb.answer()

@dp.message(SetTime.waiting_time)
async def set_time(msg: Message, state: FSMContext):
    try:
        hh, mm = map(int, msg.text.strip().split(":"))
        if not (0 <= hh < 24 and 0 <= mm < 60):
            raise ValueError
    except ValueError:
        await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (HH:MM).")
        return
    async with aiosqlite.connect(DB_PATH) as db:
        await set_user_time(db, msg.from_user.id, hh, mm)
    await msg.reply(f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {hh:02d}:{mm:02d} GMT+3",
                    reply_markup=main_keyboard())
    await state.clear()

# ---------- 9. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ¬´—Å–µ–π—á–∞—Å¬ª ----------
@dp.callback_query(F.data == "gen_now")
async def generate_now(cb: CallbackQuery):
    await cb.answer()            # —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
    await process_one_topic(cb.from_user.id, immediate=True)

@dp.message(Command("generate"))
async def cmd_generate(msg: Message):
    await process_one_topic(msg.from_user.id, immediate=True)

# ---------- 10. –õ–æ–≥–∏–∫–∞ DeepSeek + Telegraph ----------
async def deepseek_request(topic: str) -> str:
    url = "https://api.deepseek.com/chat/completions"
    headers = {"Authorization": f"Bearer {settings.deepseek_api_key}",
               "Content-Type": "application/json"}
    payload = {
        "model": "deepseek-chat",
        "messages": [{"role": "user",
                      "content": PROMPT_TEMPLATE.format(topic=topic)}],
        "temperature": 0.7,
        "max_tokens": 8000
    }
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(300)) as s:
        async with s.post(url, headers=headers, data=json.dumps(payload)) as r:
            r.raise_for_status()
            data = await r.json()
            return data["choices"][0]["message"]["content"]


async def publish_to_telegraph(title: str, md_content: str) -> str:
    page = telegraph.create_page(title = title, author_name = "DeepStudy¬†Bot",html_content = md_content)
    return page["url"]


async def process_one_topic(user_id: int, immediate=False):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT rowid, topic FROM topics
            WHERE user_id=?
            ORDER BY rowid LIMIT 1
        """, (user_id,))
        row = await cur.fetchone()
        if not row:
            if immediate:
                await bot.send_message(user_id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –Ω–µ—á–µ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.")
            return
        rowid, topic = row
        try:
            article = await deepseek_request(topic)
            url = await publish_to_telegraph(topic, article)
            await bot.send_message(user_id,
                f"üìö <b>{topic}</b>\n–ì–æ—Ç–æ–≤–æ! üëâ {url}")
            # –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º
            await db.execute("""
                UPDATE all_topics
                SET telegraph_url=?, answered_at=CURRENT_TIMESTAMP
                WHERE user_id=? AND topic=? AND telegraph_url IS NULL
            """, (url, user_id, topic))
            # —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            await db.execute("DELETE FROM topics WHERE rowid=?", (rowid,))
            await db.commit()
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ %s –¥–ª—è %s", topic, user_id)
            await bot.send_message(user_id,
                                   f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ¬´{topic}¬ª:\n{e}")

# ---------- 11. –°—É—Ç–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ ----------
async def scheduler():
    await asyncio.sleep(3)
    while True:
        now = datetime.now(LOCAL_TZ)
        async with aiosqlite.connect(DB_PATH) as db:
            cur = await db.execute("""
                SELECT user_id, hour, minute FROM user_settings
            """)
            settings_rows = await cur.fetchall()
            # –¥–µ—Ñ–æ–ª—Ç—ã
            users_def = await db.execute("SELECT DISTINCT user_id FROM topics")
            for (uid,) in await users_def.fetchall():
                if uid not in [r[0] for r in settings_rows]:
                    settings_rows.append((uid, 10, 0))

        for uid, hh, mm in settings_rows:
            if now.hour == hh and now.minute == mm:
                asyncio.create_task(process_one_topic(uid))
        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# ---------- 12. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------
async def main():
    await init_db()

    # Telegraph: —Å–æ–∑–¥–∞—ë–º –∞–∫–∫–∞—É–Ω—Ç –æ–¥–∏–Ω —Ä–∞–∑
    telegraph.create_account(short_name="deepstudy")

    # –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ + –ø–æ–ª–ª–∏–Ω–≥
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
